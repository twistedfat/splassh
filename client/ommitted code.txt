<div id = editform style="display: none">
     <form role="form" class="form-editcomment">
        	<input id="project-edit" type="text" required placeholder="Edit your comment" class="form-control input-sm input-block"/>
		<br/>
         	
        </form>
                 <br/> 
</div>

'submit form.form-addalias': function(e, t) {
        e.preventDefault();
        var content = $('#alias').val();
        content = content.trim();
      
        if (!content || content === "") {
          toastr.warning("Unable to use empty alias.");
          return;
        }

        var alias = $('#alias').val();
        
        //Add comment will automatically set comment.posted to the current time.
//something wrong with this, probably a subscribe/publish issue
        Meteor.users.update({_id:Meteor.userId()}, {$set:{"profile.alias":alias}});
        
        // clear input field
        $('#alias').val(function() {
          return this.defaultValue;
        })
    }


<div class ="container" align ="left" style="width:25%">
<form role="form" class="form-addalias">
        	<input id="alias" type="text" autofocus="" required placeholder="Do you prefer using a SPLASSH alias?" class="form-control input-sm" style= /><br/>
         	<button type="submit" class="btn btn-default btn-sm ">Become another person</button>
    </form><br/>
</div>


<template name="projectTags">
  <div class="project-tags">
  <span class="label label-info">More Tags</span>
    {{#each tags}}
      {{#if tagSelected}}
        <button type="button" class="btn btn-default btn-xs tag-name btn-success" data-tier="{{tier}}" data-toggle="tooltip" title="{{excerpt}}">{{name}}</button>
      {{else}}
        <button type="button" class="btn btn-default btn-xs tag-name" data-tier="{{tier}}" data-toggle="tooltip" title="{{excerpt}}">{{name}}</button>
      {{/if}}
    {{/each}}
  </div> <!-- button group -->
</template> 


// PROJECT TAGS
Template.projectTags.rendered = function() {
  // Applying tooltips
  $('.project-tags button').tooltip();
}
Template.projectTags.tags = function() {
  var project = this, tags = project.tags;
  if (typeof tags !== 'undefined' && tags !== null) {
    return Tags.find({ 'name' : { $ne : project.tags[0] } },  { _id: -1 }, { sort : {tier:-1 , number : 1}}); // everything but the db id
  }
  return;
}
Template.projectTags.tagSelected = function() {
  $('.project-tags button').tooltip();
  var me = this;
  var projectId = AmplifiedSession.get('currentProjectId') || null;
  var project = Projects.findOne({ _id: projectId });
  var tags = project.tags;
  
  return ( _.indexOf(tags, me.name) !== -1);
}

Template.projectTags.events({
  'click button': function(e) {
    e.preventDefault();
    
    // check permissions
    var pid = Router.current().params._id;
    var proj = Projects.findOne({ _id: pid});
    var owner = proj.owner;

    if (typeof owner !== 'undefined' && owner !== null && SPLASSH.userName(Meteor.user()) === owner) {
      var elem = $(e.target);
      elem.toggleClass('btn-success');
      if (elem.hasClass('btn-success')) {
        Projects.update( AmplifiedSession.get('currentProjectId'), { $push : { tags : this.name } } ); 
      } else {
        Projects.update( AmplifiedSession.get('currentProjectId'), { $pull : { tags : this.name } } );   
      }
    } else {
      toastr.info('This action limited to project owner, and logged in.');
    }
  }
});
